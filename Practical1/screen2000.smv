--Assumption: all screens are contained by edges

--MODULE Edge
--FROZENVAR content: {wall};
--FROZENVAR acceptBlock: boolean;
--INVAR content = wall & acceptBlock = FALSE;

MODULE Position(initial, top, left, bottom, right)
VAR
    content: {wall, empty, man, block};
    mov: {t, l, b, r, non}; --if the man moves in, from which direction does he come?
    acceptBlock: boolean;
INIT 
    content = initial & mov = non;
INVAR
    acceptBlock = (content = empty)
TRANS
    next(mov) = non &
    case
        mov = b & content = block   : next(top.content)     = block;
        mov = t & content = block   : next(bottom.content)  = block;
        mov = l & content = block   : next(right.content)   = block;
        mov = r & content = block   : next(left.content)    = block;
        TRUE                        : TRUE;
    esac;

MODULE Man(pos)
VAR
    go: {goT, goL, goB, goR};
TRANS
    next(pos) = case
            go = goT & pos.top.content = wall                                       : pos;
            go = goT & pos.top.content = block & pos.top.top.acceptBlock            : top;
            go = goT & pos.top.content = empty                                      : top;
            go = goL & pos.left.content = wall                                      : pos;
            go = goL & pos.left.content = block & pos.left.left.acceptBlock         : left;
            go = goL & pos.left.content = empty                                     : left;
            go = goR & pos.right.content = wall                                     : pos;
            go = goR & pos.right.content = block & pos.right.right.acceptBlock      : right;
            go = goR & pos.right.content = empty                                    : right;
            go = goB & pos.bottom.content = wall                                    : pos;
            go = goB & pos.bottom.content = block & pos.bottom.bottom.acceptBlock   : bottom;
            go = goB & pos.bottom.content = empty                                   : bottom;
            TRUE                                                                    : pos;
        esac
    &
    case 
        next(pos) = pos.top     : pos.top.mov = b;
        next(pos) = pos.left    : pos.left.mov = r;
        next(pos) = pos.bottom  : pos.bottom.mov = t;
        next(pos) = pos.right   : pos.right.mov = l;
    esac 
    &
    case 
        next(pos) = pos.top     : next(pos.top.content)     = man;
        next(pos) = pos.left    : next(pos.left.content)    = man;
        next(pos) = pos.bottom  : next(pos.bottom.content)  = man;
        next(pos) = pos.right   : next(pos.right.content)   = man;
    esac;
INVAR
      pos.top.content       = wall -> go != goT
    & pos.left.content      = wall -> go != goL
    & pos.bottom.content    = wall -> go != goB
    & pos.right.content     = wall -> go != goR
    & pos.top.content = block & !pos.top.top.acceptBlock            -> go != goT
    & pos.left.content = block & !pos.left.left.acceptBlock         -> go != goL
    & pos.bottom.content = block & !pos.bottom.bottom.acceptBlock   -> go != goB
    & pos.right.content = block & !pos.right.right.acceptBlock      -> go != goR;

    
MODULE main
VAR
    e   : Position(wall, e2, e2, e2, e2);
    e2  : Position(wall, e, e, e, e);
    b00 : Position(empty, e, e, b10, b01);
    b10 : Position(man, b00, e, e, e);
    b01 : Position(empty, e, b00, e, e);
    --m   : Man(b10);

--INVARSPEC all goal states no boxes

