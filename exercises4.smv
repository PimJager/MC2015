MODULE proc(i, j, s, y_self, y_check)
VAR
    state: {noncrit, wait, critical, after};
INIT
    state     = noncrit
ASSIGN
    next(state) := case
        state = noncrit                     : {noncrit, wait};
        state = wait & (s != i | !y_check)  : critical;
        state = critical                    : {critical, after};
        state = after                       : noncrit;
        TRUE                                : state;
        esac;
    next(s) := case
        next(state) = wait                  : i;
        state = after                       : j;
        TRUE                                : s;
        esac;
    next(y_self) := case
        next(state) = wait                  : TRUE;
        state = after                       : FALSE;
        TRUE                                : y_self;
        esac;
    next(y_check) := y_check;
JUSTICE 
    running & state != critical

MODULE main
VAR 
    semaphore   : {0,1};
    y0          : boolean;
    y1          : boolean;
    proc0       : process proc(0, 1, semaphore, y0, y1);
    proc1       : process proc(1, 0, semaphore, y1, y0);
ASSIGN 
    init(semaphore) := 0;
    init(y0)        := FALSE;
    init(y1)        := FALSE;

CTLSPEC AG ! (proc0.state = critical & proc1.state = critical)
CTLSPEC AG (proc0.state = wait -> AF proc0.state = critical)
CTLSPEC AG (proc1.state = wait -> AF proc1.state = critical)
